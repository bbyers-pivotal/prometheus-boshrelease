##################### Grafana Configuration Example #####################
#
# Everything has defaults so you only need to uncomment things you want to
# change

<% if_p('grafana.app_mode') do |app_mode| %>
# possible values : production, development
app_mode = <%= app_mode %>
<% end %>

#################################### Paths ####################################
[paths]
# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
#
data = /var/vcap/store/grafana

# Directory where grafana can store logs
#
logs = /var/vcap/sys/log/grafana

# Directory where grafana will automatically scan and look for plugins
#
plugins = /var/vcap/packages/grafana_plugins

#
#################################### Server ####################################
[server]
<% if_p('grafana.server.protocol') do |protocol| %>
# Protocol (http or https)
protocol = <%= protocol %>
<% end %>

# The http port to use
http_port = <%= p('grafana.server.http_port') %>

<% if_p('grafana.server.domain') do |domain| %>
# The public facing domain name used to access grafana from a browser
domain = <%= domain %>
<% end %>

<% if_p('grafana.server.enforce_domain') do |enforce_domain| %>
# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
enforce_domain = <%= enforce_domain %>
<% end %>

<% if_p('grafana.server.root_url') do |root_url| %>
# The full public facing url
root_url = <%= root_url %>
<% end %>

<% if_p('grafana.server.router_logging') do |router_logging| %>
# Log web requests
router_logging = <%= router_logging %>
<% end %>

<% if_p('grafana.server.static_root_path') do |static_root_path| %>
# the path relative working path
static_root_path = <%= static_root_path %>
<% end %>

<% if_p('grafana.server.enable_gzip') do |enable_gzip| %>
# enable gzip
enable_gzip = <%= enable_gzip %>
<% end %>

<% if_p('grafana.server.ssl_cert', 'grafana.server.ssl_key') do %>
# https certs & key file
cert_file = /var/vcap/jobs/grafana/config/ssl_cert.pem
cert_key = /var/vcap/jobs/grafana/config/ssl_key.pem
<% end %>

#################################### Database ####################################
[database]
<% if_p('grafana.database.type', 'grafana.database.host', 'grafana.database.name', 'grafana.database.user', 'grafana.database.password') do |type, host, name, user, password| %>
# Either "mysql", "postgres" or "sqlite3", it's your choice
type = <%= type %>
host = <%= host %>
name = <%= name %>
user = <%= user %>
password = <%= password %>
<% end %>

<% if_p('grafana.database.ssl_mode') do |ssl_mode| %>
# For "postgres" only, either "disable", "require" or "verify-full"
ssl_mode = <%= ssl_mode %>
<% end %>

<% if_p('grafana.database.path') do |path| %>
# For "sqlite3" only, path relative to data_path setting
path = <%= path %>
<% end %>

#################################### Session ####################################
[session]
<% if_p('grafana.session.provider') do |provider| %>
# Either "memory", "file", "redis", "mysql", "postgres", default is "file"
provider = <%= provider %>
<% end %>

<% if_p('grafana.session.provider_config') do |provider_config| %>
# Provider config options
# memory: not have any config yet
# file: session dir path, is relative to grafana data_path
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
# mysql: go-sql-driver/mysql dsn config string, e.g. `user:password@tcp(127.0.0.1:3306)/database_name`
# postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable
provider_config = <%= provider_config %>
<% end %>

<% if_p('grafana.session.cookie_name') do |cookie_name| %>
# Session cookie name
cookie_name = <%= cookie_name %>
<% end %>

<% if_p('grafana.session.cookie_secure') do |cookie_secure| %>
# If you use session in https only, default is false
cookie_secure = <%= cookie_secure %>
<% end %>

<% if_p('grafana.session.session_life_time') do |session_life_time| %>
# Session life time, default is 86400
session_life_time = <%= session_life_time %>
<% end %>

#################################### Analytics ####################################
[analytics]
<% if_p('grafana.analytics.reporting_enabled') do |reporting_enabled| %>
# Server reporting, sends usage counters to stats.grafana.org every 24 hours.
# No ip addresses are being tracked, only simple counters to track
# running instances, dashboard and error counts. It is very helpful to us.
# Change this option to false to disable reporting.
reporting_enabled = <%= reporting_enabled %>
<% end %>

<% if_p('grafana.analytics.check_for_updates') do |check_for_updates| %>
# Set to false to disable all checks to https://grafana.net
# for new vesions (grafana itself and plugins), check is used
# in some UI views to notify that grafana or plugin update exists
# This option does not cause any auto updates, nor send any information
# only a GET request to http://grafana.net to get latest versions
check_for_updates = <%= check_for_updates %>
<% end %>

<% if_p('grafana.analytics.google_analytics_ua_id') do |google_analytics_ua_id| %>
# Google Analytics universal tracking code, only enabled if you specify an id here
google_analytics_ua_id = <%= google_analytics_ua_id %>
<% end %>

#################################### Security ####################################
[security]
# default admin user, created on startup
admin_user = <%= p('grafana.security.admin_user') %>

# default admin password, can be changed before first start of grafana, or in profile settings
admin_password = <%= p('grafana.security.admin_password') %>

<% if_p('grafana.security.secret_key') do |secret_key| %>
# used for signing
secret_key = <%= secret_key %>
<% end %>

<% if_p('grafana.security.login_remember_days') do |login_remember_days| %>
# Auto-login remember days
login_remember_days = <%= login_remember_days %>
<% end %>

<% if_p('grafana.security.cookie_username') do |cookie_username| %>
cookie_username = <%= cookie_username %>
<% end %>

<% if_p('grafana.security.cookie_remember_name') do |cookie_remember_name| %>
cookie_remember_name = <%= cookie_remember_name %>
<% end %>

<% if_p('grafana.security.disable_gravatar') do |disable_gravatar| %>
# disable gravatar profile images
disable_gravatar = <%= disable_gravatar %>
<% end %>

<% if_p('grafana.security.data_source_proxy_whitelist') do |data_source_proxy_whitelist| %>
# data source proxy whitelist (ip_or_domain:port separated by spaces)
data_source_proxy_whitelist = <%= data_source_proxy_whitelist %>
<% end %>

[snapshots]
<% if_p('grafana.snapshots.external_enabled', 'grafana.snapshots.external_snapshot_url', 'grafana.snapshots.external_snapshot_name') do |external_enabled, external_snapshot_url, external_snapshot_name| %>
# snapshot sharing options
external_enabled = <%= external_enabled %>
external_snapshot_url = <%= external_snapshot_url %>
external_snapshot_name = <%= external_snapshot_name %>
<% end %>

<% if_p('grafana.snapshots.remove_expired') do |remove_expired| %>
# remove expired snapshot
snapshot_remove_expired = <%= remove_expired %>
<% end %>

<% if_p('grafana.snapshots.ttl_days') do |ttl_days| %>
# remove snapshots after 90 days
snapshot_TTL_days = <%= ttl_days %>
<% end %>

#################################### Users ####################################
[users]
<% if_p('grafana.users.allow_sign_up') do |allow_sign_up| %>
# disable user signup / registration
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.users.allow_org_create') do |allow_org_create| %>
# Allow non admin users to create organizations
allow_org_create = <%= allow_org_create %>
<% end %>

<% if_p('grafana.users.auto_assign_org') do |auto_assign_org| %>
# Set to true to automatically assign new users to the default organization (id 1)
auto_assign_org = <%= auto_assign_org %>
<% end %>

<% if_p('grafana.users.auto_assign_org_role') do |auto_assign_org_role| %>
# Default role new users will be automatically assigned (if disabled above is set to true)
auto_assign_org_role = <%= auto_assign_org_role %>
<% end %>

<% if_p('grafana.users.login_hint') do |login_hint| %>
# Background text for the user field on the login page
login_hint = <%= login_hint %>
<% end %>

<% if_p('grafana.users.default_theme') do |default_theme| %>
# Default UI theme ("dark" or "light")
default_theme = <%= default_theme %>
<% end %>

[auth]
<% if_p('grafana.auth.disable_login_form') do |disable_login_form| %>
# Set to true to disable (hide) the login form, useful if you use OAuth, defaults to false
disable_login_form = <%= disable_login_form %>
<% end %>

#################################### Anonymous Auth ##########################
[auth.anonymous]
<% if_p('grafana.auth.anonymous.enabled') do |enabled| %>
# enable anonymous access
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.anonymous.org_name') do |org_name| %>
# specify organization name that should be used for unauthenticated users
org_name = <%= org_name %>
<% end %>

<% if_p('grafana.auth.anonymous.org_role') do |org_role| %>
# specify role for unauthenticated users
org_role = <%= org_role %>
<% end %>

#################################### Github Auth ##########################
[auth.github]
<% if_p('grafana.auth.github.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.github.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.github.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.github.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.github.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.github.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.github.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.github.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.github.team_ids') do |team_ids| %>
team_ids = <%= team_ids %>
<% end %>

<% if_p('grafana.auth.github.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

#################################### Google Auth ##########################
[auth.google]
<% if_p('grafana.auth.google.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.google.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.google.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.google.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.google.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.google.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.google.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.google.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.google.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

#################################### Generic OAuth ##########################
[auth.generic_oauth]
<% if_p('grafana.auth.generic_oauth.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.generic_oauth.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.generic_oauth.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.generic_oauth.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.generic_oauth.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.generic_oauth.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.generic_oauth.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.generic_oauth.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.generic_oauth.team_ids') do |team_ids| %>
team_ids = <%= team_ids %>
<% end %>

<% if_p('grafana.auth.generic_oauth.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

<% if_p('grafana.auth.generic_oauth.name') do |name| %>
name = <%= name %>
<% end %>

<% if_p('grafana.auth.generic_oauth.tls_client_ca', 'grafana.auth.generic_oauth.tls_client_cert', 'grafana.auth.generic_oauth.tls_client_key') do %>
tls_client_ca = /var/vcap/jobs/grafana/config/generic_oauth_tls_client_ca.pem
tls_client_cert = /var/vcap/jobs/grafana/config/generic_oauth_tls_client_cert.pem
tls_client_key = /var/vcap/jobs/grafana/config/generic_oauth_tls_client_key.pem
<% end %>

#################################### Grafana.net Auth ####################
[auth.grafananet]
<% if_p('grafana.auth.grafananet.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.grafananet.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.grafananet.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.grafananet.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.grafananet.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.grafananet.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

#################################### Auth Proxy ##########################
[auth.proxy]
<% if_p('grafana.auth.proxy.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.proxy.header_name') do |header_name| %>
header_name = <%= header_name %>
<% end %>

<% if_p('grafana.auth.proxy.header_property') do |header_property| %>
header_property = <%= header_property %>
<% end %>

<% if_p('grafana.auth.proxy.auto_sign_up') do |auto_sign_up| %>
auto_sign_up = <%= auto_sign_up %>
<% end %>

#################################### Basic Auth ##########################
[auth.basic]
<% if_p('grafana.auth.basic.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

#################################### Auth LDAP ##########################
[auth.ldap]
<% if_p('grafana.auth.ldap.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.ldap.config') do %>
config_file = /var/vcap/jobs/grafana/config/ldap.toml
<% end %>

<% if_p('grafana.auth.ldap.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

#################################### SMTP / Emailing ##########################
[smtp]
<% if_p('grafana.smtp.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.smtp.host') do |host| %>
host = <%= host %>
<% end %>

<% if_p('grafana.smtp.user') do |user| %>
user = <%= user %>
<% end %>

<% if_p('grafana.smtp.password') do |password| %>
password = <%= password %>
<% end %>

<% if_p('grafana.smtp.ssl_cert') do %>
cert_file = /var/vcap/jobs/grafana/config/smtp_cert.pem
<% end %>

<% if_p('grafana.smtp.ssl_key') do %>
key_file = /var/vcap/jobs/grafana/config/smtp_key.pem
<% end %>

<% if_p('grafana.smtp.skip_verify') do |skip_verify| %>
skip_verify = <%= skip_verify %>
<% end %>

<% if_p('grafana.smtp.from_address') do |from_address| %>
from_address = <%= from_address %>
<% end %>

[emails]
<% if_p('grafana.emails.welcome_email_on_sign_up') do |welcome_email_on_sign_up| %>
welcome_email_on_sign_up = <%= welcome_email_on_sign_up %>
<% end %>

#################################### Logging ##########################
[log]
<% if_p('grafana.log.mode') do |mode| %>
# Either "console", "file", "syslog". Default is console and file
# Use space to separate multiple modes, e.g. "console file"
mode = <%= mode %>
<% end %>

<% if_p('grafana.log.level') do |level| %>
# Either "trace", "debug", "info", "warn", "error", "critical", default is "info"
level = <%= level %>
<% end %>

<% if_p('grafana.log.filters') do |filters| %>
# optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
filters = <%= filters %>
<% end %>

# For "console" mode only
[log.console]
<% if_p('grafana.log.console.level') do |level| %>
level = <%= level %>
<% end %>

<% if_p('grafana.log.console.format') do |format| %>
# log line format, valid options are text, console and json
format = <%= format %>
<% end %>

# For "file" mode only
[log.file]
<% if_p('grafana.log.file.level') do |level| %>
level = <%= level %>
<% end %>

<% if_p('grafana.log.file.format') do |format| %>
# log line format, valid options are text, console and json
format = <%= format %>
<% end %>

<% if_p('grafana.log.file.log_rotate') do |log_rotate| %>
# This enables automated log rotate(switch of following options), default is true
log_rotate = <%= log_rotate %>
<% end %>

<% if_p('grafana.log.file.max_lines') do |max_lines| %>
# Max line number of single file, default is 1000000
max_lines = <%= max_lines %>
<% end %>

<% if_p('grafana.log.file.max_size_shift') do |max_size_shift| %>
# Max size shift of single file, default is 28 means 1 << 28, 256MB
max_size_shift = <%= max_size_shift %>
<% end %>

<% if_p('grafana.log.file.daily_rotate') do |daily_rotate| %>
# Segment log daily, default is true
daily_rotate = <%= daily_rotate %>
<% end %>

<% if_p('grafana.log.file.max_days') do |max_days| %>
# Expired days of log file(delete after max days), default is 7
max_days = <%= max_days %>
<% end %>

# For "syslog" mode only
[log.syslog]
<% if_p('grafana.log.syslog.level') do |level| %>
level = <%= level %>
<% end %>

<% if_p('grafana.log.syslog.format') do |format| %>
# log line format, valid options are text, console and json
format = <%= format %>
<% end %>

<% if_p('grafana.log.syslog.network', 'grafana.log.syslog.address') do |network, address| %>
# Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
network = <%= network %>
address = <%= address %>
<% end %>

<% if_p('grafana.log.syslog.facility') do |facility| %>
# Syslog facility. user, daemon and local0 through local7 are valid.
facility = <%= facility %>
<% end %>

<% if_p('grafana.log.syslog.tag') do |tag| %>
# Syslog tag. By default, the process' argv[0] is used.
tag = <%= tag %>
<% end %>

#################################### AMQP Event Publisher ##########################
[event_publisher]
<% if_p('grafana.event_publisher.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.event_publisher.rabbitmq_url') do |rabbitmq_url| %>
rabbitmq_url = <%= rabbitmq_url %>
<% end %>

<% if_p('grafana.event_publisher.exchange') do |exchange| %>
exchange = <%= exchange %>
<% end %>

#################################### Dashboard JSON files ##########################
[dashboards.json]
<% if_p('grafana.dashboards.json.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

path = /var/vcap/store/grafana/dashboards

#################################### Alerting ######################################
# docs about alerting can be found in /docs/sources/alerting/
#              __.-/|
#              \`o_O'
#               =( )=  +----------------------------+
#                 U|   | Alerting is still in alpha |
#       /\  /\   / |   +----------------------------+
#      ) /^\) ^\/ _)\     |
#      )   /^\/   _) \    |
#      )   _ /  / _)  \___|_
#  /\  )/\/ ||  | )_)\___,|))
# <  >      |(,,) )__)    |
#  ||      /    \)___)\
#  | \____(      )___) )____
#   \______(_______;;;)__;;;)

[alerting]
<% if_p('grafana.alerting.execute_alerts') do |execute_alerts| %>
# Makes it possible to turn off alert rule execution.
execute_alerts = <%= execute_alerts %>
<% end %>

#################################### Internal Grafana Metrics ##########################
# Metrics available at HTTP API Url /api/metrics
[metrics]

<% if_p('grafana.metrics.enabled') do |enabled| %>
# Disable / Enable internal metrics
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.metrics.interval_seconds') do |interval_seconds| %>
# Publish interval
interval_seconds = <%= interval_seconds %>
<% end %>

# Send internal metrics to Graphite
[metrics.graphite]
<% if_p('grafana.metrics.graphite.address') do |address| %>
address = <%= address %>
<% end %>

<% if_p('grafana.metrics.graphite.prefix') do |prefix| %>
prefix = <%= prefix %>
<% end %>

#################################### Internal Grafana Metrics ##########################
# Url used to to import dashboards directly from Grafana.net
[grafana_net]
<% if_p('grafana.grafana_net.url') do |url| %>
url = <%= url %>
<% end %>

#################################### External image storage ##########################
[external_image_storage]
<% if_p('grafana.external_image_storage.provider') do |provider| %>
# Used for uploading images to public servers so they can be included in slack/email messages.
# you can choose between (s3, webdav)
provider = <%= provider %>
<% end %>

<% if_p('grafana.external_image_storage.s3.bucket_url', 'grafana.external_image_storage.s3.access_key', 'grafana.external_image_storage.s3.secret_key') do |bucket_url, access_key, secret_key| %>
[external_image_storage.s3]
bucket_url = <%= bucket_url %>
access_key = <%= access_key %>
secret_key = <%= secret_key %>
<% end %>

<% if_p('grafana.external_image_storage.webdav.url', 'grafana.external_image_storage.webdav.username', 'grafana.external_image_storage.webdav.password') do |url, username, password| %>
[external_image_storage.webdav]
url = <%= url %>
username = <%= username %>
password = <%= provider %>
<% end %>
